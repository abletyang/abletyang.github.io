<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AbletYang&#39;s Blog</title>
  
  
  <link href="https://abletyang.github.io/atom.xml" rel="self"/>
  
  <link href="https://abletyang.github.io/"/>
  <updated>2024-03-26T09:03:11.471Z</updated>
  <id>https://abletyang.github.io/</id>
  
  <author>
    <name>abletyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Runtime -- objc_class结构</title>
    <link href="https://abletyang.github.io/2024/03/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>https://abletyang.github.io/2024/03/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2024-03-20T08:53:23.000Z</published>
    <updated>2024-03-26T09:03:11.471Z</updated>
    
    <content type="html"><![CDATA[<p>参考博客：</p><ul><li><a href="http://www.cocoachina.com/ios/20141031/10105.html">Objective-C Runtime 运行时之一：类与对象</a></li><li><a href="https://www.jianshu.com/p/adf0d566c887">iOS运行时(Runtime)详解+Demo</a></li><li><a href="http://ios.jobbole.com/89209/">神经病院 Objective-C Runtime 入院第一天— isa 和 Class</a></li></ul><p><strong>以下是官方文档</strong></p><ul><li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">Objective-C Runtime Programming Guide</a></li><li><a href="https://developer.apple.com/documentation/objectivec/objective_c_runtime">Objective-C RuntimeAPI</a></li><li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210">Programming with Objective-C</a></li></ul><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul><li>clang编译器的命令:<blockquote><p>clang -rewrite-objc main.m<br>该命令可以将.m的OC文件转写为.cpp文件</p></blockquote></li></ul><h3 id="一、Class基本结构"><a href="#一、Class基本结构" class="headerlink" title="一、Class基本结构"></a>一、Class基本结构</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_class : objc_object &#123;</span><br><span class="line">  objc_class(<span class="keyword">const</span> objc_class&amp;) = delete;</span><br><span class="line">  objc_class(objc_class&amp;&amp;) = delete;</span><br><span class="line">  <span class="type">void</span> operator=(<span class="keyword">const</span> objc_class&amp;) = delete;</span><br><span class="line">  <span class="type">void</span> operator=(objc_class&amp;&amp;) = delete;</span><br><span class="line">    <span class="comment">// Class ISA; //8  这里是通过 struct objc_object 继承而来</span></span><br><span class="line">    Class superclass; <span class="comment">// 8</span></span><br><span class="line">    cache_t cache;      <span class="comment">//16       // formerly cache pointer and vtable </span></span><br><span class="line">    class_data_bits_t bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要弄清楚 以下四个：ISA、 superclass 、cache 、bits。</p><h4 id="1-1-ISA-superclass-指针"><a href="#1-1-ISA-superclass-指针" class="headerlink" title="1.1 ISA &amp; superclass 指针"></a>1.1 ISA &amp; superclass 指针</h4><p><img src="/images/ISA.png"></p><ul><li>实例对象的 isa 指针的地址值并不是直接指向类对象，需要 &amp;（逻辑与）上 ISA_MASK 才等于类对象的地址值；</li><li>只要拿到实例对象的 isa ，即可找到类对象；只要拿到类对象的 isa ，即可找到元类对象.</li><li>所有的实例对象的方法和属性只需要一份 存放在类对象中节省内存方便查找</li><li>但是在我们调用类方法的时候，类对象的isa里面是什么呢？这里为了和对象查找方法的机制一致，遂引入了元类(meta-class)的概念。参考链接：<a href="http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html">What is a meta-class in Objective-C?</a></li></ul><h4 id="1-2-cache-t-cache"><a href="#1-2-cache-t-cache" class="headerlink" title="1.2 cache_t cache"></a>1.2 cache_t cache</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> cache_t &#123;</span><br><span class="line">    <span class="keyword">struct</span> bucket_t *_buckets; <span class="comment">// bucket_t的结构体中存储了一个unsigned long和一个IMP。IMP是一个函数指针，指向了一个方法的具体实现</span></span><br><span class="line">    mask_t _mask;  <span class="comment">// 分配用来缓存bucket的总数</span></span><br><span class="line">    mask_t _occupied; <span class="comment">// 表明目前实际占用的缓存bucket的个数</span></span><br><span class="line">    </span><br><span class="line">    ···省略函数</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Cache 为方法调用的性能进行优化，每当实例对象接收到一个消息时，它不会直接在 isa 指针指向的类的方法列表中遍历查找能够响应的方法，因为每次都要查找效率太低了，而是优先在 Cache 中查找。<br>Runtime 系统会把被调用的方法存到 Cache 中，如果一个方法被调用，那么它有可能今后还会被调用，下次查找的时候就会效率更高</p><h4 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考博客：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20141031/10105.html&quot;&gt;Objective-C Runtime 运行时之一：类与对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://abletyang.github.io/2024/03/20/hello-world/"/>
    <id>https://abletyang.github.io/2024/03/20/hello-world/</id>
    <published>2024-03-20T08:50:03.043Z</published>
    <updated>2024-03-21T02:31:29.764Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
